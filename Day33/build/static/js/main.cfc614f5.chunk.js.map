{"version":3,"sources":["Components/AddTodo.tsx","actions/index.ts","Components/Todo.tsx","Components/TodoList.tsx","App.tsx","reducers/todoReducer.ts","reducers/index.ts","store.ts","index.tsx"],"names":["Add","dispatch","useDispatch","useState","todo","setTodo","className","type","value","onChange","e","target","placeholder","onClick","payload","AddTodo","Todo","index","faClipboardCheck","icon","setIcon","classes","setClasses","faTrashAlt","TodoList","todos","useSelector","state","map","App","todoReduce","action","filter","item","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAwBeA,EApBH,WACR,IAAMC,EAAWC,cACjB,EAAwBC,mBAAiB,IAAzC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACI,mCACI,sBAAKC,UAAU,aAAf,UACA,uBAAOC,KAAK,OAAOC,MAAOJ,EAAMK,SAAU,SAACC,GAAD,OAAOL,EAAQK,EAAEC,OAAOH,QAAQI,YAAY,eACtF,wBAAQC,QAAS,WACb,GAAY,KAATT,EAIC,MAAO,GAHXH,ECbA,SAACG,GACb,MAAO,CACHG,KAAM,WACNO,QAASV,GDUQW,CAAQX,IAAQC,EAAQ,KAFrC,4B,eE4BGW,EA5BF,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAOb,EAAiB,EAAjBA,KAEZH,EAAWC,cACjB,EAAwBC,mBAASe,KAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BjB,mBAAS,uBAAvC,mBAAOkB,EAAP,KAAgBC,EAAhB,KAEA,OACI,mCACR,sBAAKhB,UAAWe,EAAhB,UACQ,sBAAMf,UAAU,YAAhB,SAA6BF,IAC7B,cAAC,IAAD,CACAS,QAAS,WACFM,IAASD,KACZE,EAAQG,KACRD,EAAW,mBAEHH,IAASI,MACbtB,EDpBL,CACHM,KAAM,cACNO,QCkB4BG,IACpBG,EAAQF,KACRI,EAAW,yBAGnBH,KAAMA,UCdCK,EAfE,WACb,IAAMC,EAAmBC,aAAY,SAACC,GAAD,OAAuBA,EAAMF,SAClE,OACI,mCACA,qBAAKnB,UAAU,YAAf,SACCmB,EAAMG,KAAI,SAACxB,EAAca,GACtB,OACI,cAAC,EAAD,CAAMb,KAAMA,EAAkBa,MAAOA,GAAdA,WCIxBY,MAXf,WACE,OACE,mCACE,sBAAKvB,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,U,gBCYOwB,EATG,WAA0C,IAAzCH,EAAwC,uDAAtB,GAAII,EAAkB,uCACvD,MAAmB,aAAhBA,EAAOxB,KACA,GAAN,mBAAWoB,GAAX,CAAiBI,EAAOjB,UACA,gBAAhBiB,EAAOxB,KACRoB,EAAMK,QAAO,SAACC,EAAMhB,GAAP,OAAiBA,IAAUc,EAAOjB,WAEnDa,GCTIO,EANKC,YAAgB,CAChCV,MAAOK,ICCIM,EAFDC,YAAYH,GCG1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACA,cAAC,EAAD,QAGFK,SAASC,eAAe,W","file":"static/js/main.cfc614f5.chunk.js","sourcesContent":["import {AddTodo} from \"../actions/index\";\nimport { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nconst Add = () => {\n    const dispatch = useDispatch();\n    const [todo, setTodo] = useState<string>(\"\");\n    return(\n        <>\n            <div className=\"input-area\">\n            <input type=\"text\" value={todo} onChange={(e) => setTodo(e.target.value)} placeholder=\"Add todo..\"/>\n            <button onClick={() => {\n                if(todo !== \"\"){\n                dispatch(AddTodo(todo)); setTodo(\"\")\n                }\n                else{\n                    return \"\";\n                }\n                }}>Add Todo</button>\n            </div>\n</>\n    )\n}\n\nexport default Add;","const AddTodo = (todo: string) => {\n    return({\n        type: \"ADD_TODO\",\n        payload: todo,\n    })\n}\n\nconst RemoveTodo = (id: number) => {\n    return({\n        type: \"REMOVE_TODO\",\n        payload: id,\n    })\n}\n\nexport {AddTodo, RemoveTodo};","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClipboardCheck, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\nimport { useState } from 'react';\nimport { RemoveTodo } from '../actions';\nimport { useDispatch } from 'react-redux';\n\ninterface todo{\n    index: number,\n    todo: string\n}\n\nconst Todo = ({index, todo} : todo) => {\n\n    const dispatch = useDispatch();\n    const [icon, setIcon] = useState(faClipboardCheck)\n    const [classes, setClasses] = useState(\"todo todo-remaining\");\n\n    return(\n        <>\n<div className={classes}>\n        <span className=\"todo-text\">{todo}</span>\n        <FontAwesomeIcon \n        onClick={()=>{\n            if(icon === faClipboardCheck){\n            setIcon(faTrashAlt)\n            setClasses(\"todo todo-done\")\n            }\n            else if(icon === faTrashAlt){\n                dispatch(RemoveTodo(index))\n                setIcon(faClipboardCheck)\n                setClasses(\"todo todo-remaining\")\n            }\n            }}\n        icon={icon} />\n        </div>\n        </>\n    )\n}\n\nexport default Todo;","import { useSelector} from 'react-redux';\nimport Todo from './Todo';\nimport { storeType } from '../reducers/index';\n\nconst TodoList = () => {\n    const todos : string[] = useSelector((state : storeType) => state.todos)\n    return(\n        <>\n        <div className=\"todo-list\">\n        {todos.map((todo: string, index: number) => {\n            return(  \n                <Todo todo={todo} key={index} index={index} />\n            )\n        })}\n        </div>\n        </>\n    )\n}\n\nexport default TodoList;","import './App.css';\nimport Add from './Components/AddTodo';\nimport TodoList from './Components/TodoList';\n\nfunction App() {\n  return (\n    <>\n      <div className=\"container\">\n        <Add/>\n        <TodoList/>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","interface addTodo{\n    type: string,\n    payload: string\n}\n\ninterface removeTodo{\n    type: string,\n    payload: number\n}\n\ntype todo = addTodo | removeTodo;\n\nconst todoReduce= (state :string[] = [], action : todo) => {\n    if(action.type === \"ADD_TODO\"){\n        return [...state,action.payload]\n    } else if ( action.type === \"REMOVE_TODO\" ){\n        return state.filter((item, index) => index !== action.payload)\n    }\n    return state;\n}\n\nexport default todoReduce;","import todoReduce from \"./todoReducer\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n    todos: todoReduce,\n})\n\nexport type storeType = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(rootReducer);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}