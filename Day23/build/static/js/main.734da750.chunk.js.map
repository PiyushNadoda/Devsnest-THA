{"version":3,"sources":["App.js","Components/CustomHook.jsx","index.js"],"names":["App","initialState","useState","state","setState","toggle","useCallback","useToggle","isTextChanged","setIsTextChanged","value","setValue","ref","useRef","handleMouseOver","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener","useHover","hoverRef","isHovered","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iKAYeA,MATf,WACE,MCFgB,WAA2B,IAA1BC,EAAyB,wDAExC,EAA0BC,mBAASD,GAAnC,mBAAOE,EAAP,KAAcC,EAAd,KAEMC,EAASC,uBAAY,kBAAMF,GAAS,SAAAD,GAAK,OAAKA,OAAQ,IAE5D,MAAO,CAACA,EAAOE,GDJyBE,GAA1C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,ECKF,WACI,MAA0BP,oBAAS,GAAnC,mBAAOQ,EAAP,KAAcC,EAAd,KACMC,EAAMC,iBAAO,MACbC,EAAkB,kBAAMH,GAAS,IACjCI,EAAiB,kBAAMJ,GAAS,IAetC,OAdAK,qBACE,WACE,IAAMC,EAAOL,EAAIM,QACjB,GAAID,EAGF,OAFAA,EAAKE,iBAAiB,YAAaL,GACnCG,EAAKE,iBAAiB,WAAYJ,GAC3B,WACLE,EAAKG,oBAAoB,YAAaN,GACtCG,EAAKG,oBAAoB,WAAYL,OAMtC,CAACH,EAAKF,GDxBeW,GAA9B,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,OAAQ,qCACJ,wBAAQC,QAASf,EAAjB,SAAoCD,EAAgB,UAAY,oBAChE,qBAAKI,IAAKU,EAAV,SAAqBC,EAAY,eAAO,qBEJ9CE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.734da750.chunk.js","sourcesContent":["import './App.css';\nimport {useToggle , useHover } from './Components/CustomHook';\n\nfunction App() {\n  const [isTextChanged, setIsTextChanged] = useToggle();\n  const [hoverRef, isHovered] = useHover()\n  return (<>\n      <button onClick={setIsTextChanged}>{isTextChanged ? 'Toggled' : 'Click to Toggle'}</button>\n      <div ref={hoverRef}>{isHovered ? \"üòÅ\" : \"‚òπÔ∏è\"}</div>\n  </>);\n}\n\nexport default App;\n","import { useCallback, useState, useRef, useEffect } from \"react\";\r\n\r\nconst useToggle = (initialState = false) => {\r\n\r\n    const [state, setState] = useState(initialState);\r\n    \r\n    const toggle = useCallback(() => setState(state => !state), []);\r\n    \r\n    return [state, toggle]\r\n}\r\nfunction useHover() {\r\n    const [value, setValue] = useState(false);\r\n    const ref = useRef(null);\r\n    const handleMouseOver = () => setValue(true);\r\n    const handleMouseOut = () => setValue(false);\r\n    useEffect(\r\n      () => {\r\n        const node = ref.current;\r\n        if (node) {\r\n          node.addEventListener(\"mouseover\", handleMouseOver);\r\n          node.addEventListener(\"mouseout\", handleMouseOut);\r\n          return () => {\r\n            node.removeEventListener(\"mouseover\", handleMouseOver);\r\n            node.removeEventListener(\"mouseout\", handleMouseOut);\r\n          };\r\n        }\r\n      },\r\n    //   [ref.current]\r\n    );\r\n    return [ref, value];\r\n  }\r\nexport {useToggle, useHover};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}