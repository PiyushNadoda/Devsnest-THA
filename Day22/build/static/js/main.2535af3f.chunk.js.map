{"version":3,"sources":["Components/Templates.jsx","Components/meme.jsx","App.js","index.js"],"names":["Templates","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","alert","i","length","console","log","forEach","fetch","then","res","json","data","App","setTemplates","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAgBeA,EAhBG,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,QAC3B,OACI,qBAAKC,UAAU,YAAf,SAEFF,EAAUG,KAAK,SAACC,GAAD,OACZ,qBAAuBF,UAAU,WAAWG,QAAS,WACjDJ,EAAQG,IADZ,SAGE,qBAAKE,MAAO,CAACC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,MAA2BN,UAAU,WAHzDE,EAASK,U,cCmDbC,EAtDF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMV,EAAa,EAAbA,QACjB,EAAwBW,mBAAS,CAC7BC,YAAYF,EAAKF,GACjBK,SAAS,aACTC,SAAS,aACTC,MAAO,KAJX,mBAAOC,EAAP,KAAaC,EAAb,KAgCA,OACI,sBAAKhB,UAAU,OAAf,UACI,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,KACxB,8BAEI,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAGC,GAAJ,OAC3B,uBAAOC,KAAK,OAAmBC,YAAW,uBAAkBF,EAAM,GAAKG,SAAU,SAACC,GAC9E,IAAMC,EAAWZ,EAAKD,MACtBa,EAASL,GAAS,CAACM,KAAMF,EAAEG,OAAOC,OAClCd,EAAQ,2BAAID,GAAL,IAAWD,MAAOa,OAHLL,QAOhC,gCACI,wBAAQnB,QAtCC,WACjB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAAC8B,EAAKT,GAKrB,OAJAhB,GAAG,iBAAcgB,EAAd,mBAA8BS,EAAIH,MACrB,KAAbG,EAAIH,MACHI,MAAM,sBAEH,MAGX,IAAI,IAAIC,EAAE,EAAGA,EAAGlB,EAAKD,MAAMoB,QACG,KAAvBnB,EAAKD,MAAMmB,GAAGL,KADcK,IAI3BE,QAAQC,IAAIrB,EAAKD,MAAMuB,SAAS,SAAAN,GAAG,OAAY,OAARA,MACvCO,MAAMhC,GACLiC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF3C,EAAQ,2BAAIU,GAAL,IAAWH,IAAKoC,EAAKA,KAAKpC,WAoBjC,2BACA,wBAAQH,QAAS,kBAAMJ,EAAQ,OAA/B,qCC1BD4C,MAnBf,WACE,MAAkCjC,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkB8C,EAAlB,KACA,EAAwBlC,mBAAS,MAAjC,mBAAOD,EAAP,KAAaV,EAAb,KAQA,OAPA8C,qBAAU,WACRP,MAAM,qCACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GACLE,EAAaF,EAAKA,KAAKI,YAExB,IAED,sBAAK9C,UAAU,MAAf,UACA,gDACU,OAATS,EAAe,cAAC,EAAD,CAAWX,UAAWA,EAAWC,QAASA,IAAc,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QCdvGgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2535af3f.chunk.js","sourcesContent":["const Templates = ({templates, setMeme}) => {\r\n    return (\r\n        <div className=\"templates\">       \r\n    {\r\n      templates.map( (template) => \r\n         <div key={template.id} className=\"template\" onClick={() => {\r\n             setMeme(template)\r\n         }}>\r\n           <div style={{backgroundImage: `url(${template.url})`}} className=\"image\"></div>\r\n         </div>\r\n      )\r\n    }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Templates;","import { useState } from \"react\";\r\n\r\nconst Meme = ({meme, setMeme}) => {\r\n    const [form, setForm] = useState({\r\n        template_id:meme.id,\r\n        username:\"Piyush0078\",\r\n        password:\"PIYUSH@img\",\r\n        boxes: [],\r\n    })\r\n\r\n\r\n    const generateMeme = () => {\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box, index) => {\r\n        url += `&boxes[${index}][text]=${box.text}`\r\n        if(box.text === \"\"){\r\n            alert(\"fill all the valus\")\r\n        }\r\n        return \"\";\r\n    })\r\n    \r\n    for(let i=0; i< form.boxes.length; i++){\r\n        if(form.boxes[i].text === \"\"){\r\n            break;\r\n        } else{\r\n            console.log(form.boxes.forEach( box => box === null ));\r\n            fetch(url)\r\n            .then(res => res.json())\r\n            .then(data =>  {\r\n                setMeme({...meme, url: data.data.url})\r\n            })\r\n        }\r\n    }\r\n    };\r\n\r\n    return(\r\n        <div className=\"meme\">\r\n            <img src={meme.url} alt=\"\" />\r\n            <div>\r\n            {\r\n                [...Array(meme.box_count)].map((_, index) => (\r\n                    <input type=\"text\" key={index} placeholder={`Meme Caption ${index+1}`} onChange={(e)=>{\r\n                        const newBoxes = form.boxes;\r\n                        newBoxes[index] = {text: e.target.value}\r\n                        setForm({...form, boxes: newBoxes})\r\n                    }}/>               \r\n                     ))\r\n            }</div>\r\n            <div>\r\n                <button onClick={generateMeme}>Generate Meme</button>\r\n                <button onClick={() => setMeme(null)} > Choose template</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Meme;","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Templates from './Components/Templates';\nimport Meme from \"./Components/meme\"\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [meme, setMeme] = useState(null);  \n  useEffect(() => {\n    fetch('https://api.imgflip.com/get_memes')\n    .then(res => res.json())\n    .then((data) => {\n      setTemplates(data.data.memes);\n    })\n  }, []);\n  return (\n    <div className=\"App\">\n    <h1>meme generator</h1>\n    {meme === null? <Templates templates={templates} setMeme={setMeme} /> : <Meme meme={meme} setMeme={setMeme}/>}\n    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}